[{"/home/goku/projects/skill-share-react/src/reportWebVitals.js":"1","/home/goku/projects/skill-share-react/src/index.js":"2","/home/goku/projects/skill-share-react/src/components/Auth/Register.js":"3","/home/goku/projects/skill-share-react/src/App.js":"4","/home/goku/projects/skill-share-react/src/components/Home/Home.js":"5","/home/goku/projects/skill-share-react/src/functions.js":"6","/home/goku/projects/skill-share-react/src/components/Header/Header.js":"7","/home/goku/projects/skill-share-react/src/api/resolver.js":"8","/home/goku/projects/skill-share-react/src/api/UserAPI.js":"9","/home/goku/projects/skill-share-react/src/components/Auth/Login.js":"10","/home/goku/projects/skill-share-react/src/components/Dashboard/Dashboard.js":"11","/home/goku/projects/skill-share-react/src/components/Post/Post.js":"12","/home/goku/projects/skill-share-react/src/components/Editor/CustomEditor.js":"13","/home/goku/projects/skill-share-react/src/components/WritePost/WritePost.js":"14","/home/goku/projects/skill-share-react/src/api/PostAPI.js":"15","/home/goku/projects/skill-share-react/src/components/PostView/PostView.js":"16","/home/goku/projects/skill-share-react/src/components/Post/PendingPost.js":"17","/home/goku/projects/skill-share-react/src/components/Post/Comment.js":"18","/home/goku/projects/skill-share-react/src/context/context.js":"19"},{"size":362,"mtime":1609758223830,"results":"20","hashOfConfig":"21"},{"size":500,"mtime":1609758223830,"results":"22","hashOfConfig":"21"},{"size":3252,"mtime":1610287355300,"results":"23","hashOfConfig":"21"},{"size":2825,"mtime":1610290953320,"results":"24","hashOfConfig":"21"},{"size":1606,"mtime":1610287484240,"results":"25","hashOfConfig":"21"},{"size":372,"mtime":1610038166210,"results":"26","hashOfConfig":"21"},{"size":1519,"mtime":1610287379740,"results":"27","hashOfConfig":"21"},{"size":202,"mtime":1609759604270,"results":"28","hashOfConfig":"21"},{"size":1305,"mtime":1610208268550,"results":"29","hashOfConfig":"21"},{"size":2426,"mtime":1610282522780,"results":"30","hashOfConfig":"21"},{"size":3518,"mtime":1610290923330,"results":"31","hashOfConfig":"21"},{"size":5208,"mtime":1610332961370,"results":"32","hashOfConfig":"21"},{"size":4206,"mtime":1610287373330,"results":"33","hashOfConfig":"21"},{"size":1715,"mtime":1610283964990,"results":"34","hashOfConfig":"21"},{"size":3450,"mtime":1610261866560,"results":"35","hashOfConfig":"21"},{"size":1656,"mtime":1610332566570,"results":"36","hashOfConfig":"21"},{"size":2105,"mtime":1610284424380,"results":"37","hashOfConfig":"21"},{"size":592,"mtime":1610332572370,"results":"38","hashOfConfig":"21"},{"size":201,"mtime":1609759604360,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"14xxbvo",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/goku/projects/skill-share-react/src/reportWebVitals.js",[],["86","87"],"/home/goku/projects/skill-share-react/src/index.js",[],"/home/goku/projects/skill-share-react/src/components/Auth/Register.js",["88"],"import React, { useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport UserAPI from '../../api/UserAPI';\n\n/**\n * @author\n * @function Register\n **/\n\nconst Register = (props) => {\n  const emailElRef = useRef('');\n  const passwordElRef = useRef('');\n  const firstNameElRef = useRef('');\n  const lastNameElRef = useRef('');\n\n  const history = useHistory();\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    const { data, err } = await UserAPI.signUp({\n      email: emailElRef.current.value,\n      password: passwordElRef.current.value,\n      firstName: firstNameElRef.current.value,\n      lastName: lastNameElRef.current.value,\n    });\n\n    if (err) {\n      console.error(err);\n    } else {\n      history.push('/login');\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col justify-center items-center h-screen px-2\">\n      <p className=\"text-3xl\">Register</p>\n      <form\n        className=\"group w-full max-w-sm p-5 border rounded-xl border-opacity-50 m-5 border-indigo-500 transition-all hover:bg-indigo-50 hover:shadow-lg hover:border-transparent\"\n        onSubmit={(e) => handleLogin(e)}\n      >\n        <div className=\"mb-4\">\n          <label className=\"block text-sm text-indigo-500 font-bold text-left group-hover:text-indigo-800\">\n            Email\n          </label>\n          <input\n            className=\"border border-gray-400 appearance-none rounded w-full p-2 mt-1 focus:border-indigo-600 focus: outline-none active:border-indigo-600\"\n            type=\"text\"\n            placeholder=\"Email\"\n            ref={emailElRef}\n          />\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-sm text-indigo-500 font-bold text-left group-hover:text-indigo-800\">\n            Password\n          </label>\n          <input\n            className=\"border border-gray-400 appearance-none rounded w-full p-2 mt-1 focus:border-indigo-600 focus: outline-none active:border-indigo-600\"\n            type=\"password\"\n            placeholder=\"Password\"\n            ref={passwordElRef}\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block text-sm text-indigo-500 font-bold text-left group-hover:text-indigo-800\">\n            First Name\n          </label>\n          <input\n            className=\"border border-gray-400 appearance-none rounded w-full p-2 mt-1 focus:border-indigo-600 focus: outline-none active:border-indigo-600\"\n            type=\"text\"\n            placeholder=\"First Name\"\n            ref={firstNameElRef}\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label className=\"block text-sm text-indigo-500 font-bold text-left group-hover:text-indigo-800\">\n            Last Name\n          </label>\n          <input\n            className=\"border border-gray-400 appearance-none rounded w-full p-2 mt-1 focus:border-indigo-600 focus: outline-none active:border-indigo-600\"\n            type=\"text\"\n            placeholder=\"Last Name\"\n            ref={lastNameElRef}\n          />\n        </div>\n\n        <div className=\"flex justify-center\">\n          <button type=\"submit\" className=\"btn-indigo mx-1\">\n            Register\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;\n","/home/goku/projects/skill-share-react/src/App.js",[],"/home/goku/projects/skill-share-react/src/components/Home/Home.js",["89","90"],"import React, { useEffect, useState } from 'react';\nimport { HiSearch } from 'react-icons/hi';\nimport PostAPI from '../../api/PostAPI';\n\nimport PostView from '../PostView/PostView';\n/**\n * @author\n * @function Home\n **/\n\nconst Home = (props) => {\n  const [searchInput, setSearchInput] = useState('');\n  const [results, setResults] = useState([]);\n\n  const handleSearch = async (searchInput) => {\n    const { data, err } = await PostAPI.searchPost(searchInput, 10);\n    setResults(data);\n    // console.log(data);\n  };\n\n  useEffect(() => {\n    handleSearch(searchInput);\n  }, []);\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <div className=\"bg-purple-500 w-full pt-10 flex flex-col items-center p-2\">\n        <p className=\"text-5xl font-bold\">Posts</p>\n        <div className=\"w-full max-w-sm m-4\">\n          <span className=\"absolute p-2\">\n            <HiSearch className=\"text-2xl text-gray-400\" />\n          </span>\n          <input\n            className=\"w-full p-2 pl-10 rounded-sm text-gray-800\"\n            onChange={(e) => {\n              if (e.target.value.trim() !== '') {\n                handleSearch(e.target.value);\n              }\n              setSearchInput(e.target.value);\n            }}\n            placeholder=\"Search...\"\n            value={searchInput}\n          />\n        </div>\n      </div>\n      <div className=\"mt-1 px-2 w-full max-w-screen-sm\">\n        {results.length !== 0 &&\n          results.map((result, index) => (\n            <PostView result={result} key={`post-view-${index}`} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/home/goku/projects/skill-share-react/src/functions.js",[],"/home/goku/projects/skill-share-react/src/components/Header/Header.js",[],"/home/goku/projects/skill-share-react/src/api/resolver.js",["91"],"export default async (promise) => {\n  const resolved = {\n    data: null,\n    err: null,\n  };\n\n  try {\n    resolved.data = await promise;\n  } catch (e) {\n    resolved.err = e;\n  }\n\n  return resolved;\n};\n","/home/goku/projects/skill-share-react/src/api/UserAPI.js",["92"],"import axios from 'axios';\nimport resolver from './resolver';\n\nconst signIn = async (values) => {\n  return await resolver(\n    axios\n      .post(`${process.env.REACT_APP_BACKEND_URL}/auth/login`, values)\n      .then((res) => res.data)\n  );\n};\n\nconst signUp = async (userData) => {\n  return await resolver(\n    axios\n      .post(`${process.env.REACT_APP_BACKEND_URL}/auth/register`, userData)\n      .then((res) => res.data)\n  );\n};\n\nconst getUser = async (token) => {\n  return await resolver(\n    axios\n      .get(`${process.env.REACT_APP_BACKEND_URL}/api/user`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((res) => res.data)\n  );\n};\n\nconst updateUser = async (token, update) => {\n  return await resolver(\n    axios\n      .post(`${process.env.REACT_APP_BACKEND_URL}/api/user/update`, update, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((res) => res.data)\n  );\n};\n\nconst getUserPosts = async (token) => {\n  return await resolver(\n    axios\n      .get(`${process.env.REACT_APP_BACKEND_URL}/api/user/posts`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((res) => res.data)\n  );\n};\n\nexport default { signIn, getUser, signUp, updateUser, getUserPosts };\n","/home/goku/projects/skill-share-react/src/components/Auth/Login.js",[],"/home/goku/projects/skill-share-react/src/components/Dashboard/Dashboard.js",["93"],"import React, { useContext, useEffect, useState } from 'react';\nimport PostAPI from '../../api/PostAPI';\nimport UserAPI from '../../api/UserAPI';\nimport context from '../../context/context';\nimport PostView from '../PostView/PostView';\n\nexport default function Dashboard(props) {\n  const { user, token, updateUser } = useContext(context);\n  const [pendingPosts, setPendingPosts] = useState([]);\n  const [yourPosts, setYourPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const fetchPendingPosts = async (token) => {\n    const { data, err } = await PostAPI.adminGetPosts(token);\n\n    if (err) {\n    } else {\n      setPendingPosts(data);\n    }\n  };\n  const fetchYourPosts = async (token) => {\n    const { data, err } = await UserAPI.getUserPosts(token);\n    if (err) {\n    } else {\n      setYourPosts(data);\n      setFilteredPosts(data);\n    }\n  };\n\n  const handlePostFilter = async (event) => {\n    const filter = event.target.value.toLowerCase();\n    console.log(filter);\n\n    if (filter === 'all') {\n      setFilteredPosts(yourPosts);\n    } else {\n      setFilteredPosts(yourPosts.filter((post) => post.approved === filter));\n    }\n  };\n\n  useEffect(() => {\n    if (user.userType === 'Admin') {\n      fetchPendingPosts(token);\n    }\n    updateUser(token);\n    fetchYourPosts(token);\n  }, []);\n\n  return (\n    <div className=\"m-1 mx-auto w-full max-w-screen-lg h-screen\">\n      <div className=\"personal-stats flex justify-start overflow-auto overflow-x-hidden border-b-4\">\n        <div className=\"salary m-2 rounded shadow hover:shadow-lg w-36 h-24 grid place-items-center bg-indigo-100\">\n          <p>\n            <b>Monthly Income</b>\n          </p>\n          <p>{user.reputationPoint * 150}₮</p>\n        </div>\n        <div className=\"reputation m-2 rounded shadow hover:shadow-lg w-36 h-24 grid place-items-center bg-indigo-100\">\n          <p>\n            <b>Your reputation</b>\n          </p>\n          <p>{user.reputationPoint} points</p>\n        </div>\n      </div>\n      <div className=\"flex flex-wrap md:flex-nowrap justify-start\">\n        <div className=\"your-posts w-full md:w-6/12 max-h-96 md:max-h-full  overflow-auto overflow-x-hidden m-2 rounded shadow hover:shadow-lg p-2 bg-indigo-100\">\n          <div className=\"w-full flex justify-between\">\n            <p className=\"text-2xl font-bold \">Your posts</p>\n            <select\n              className=\"rounded outline-none\"\n              onChange={handlePostFilter}\n            >\n              <option>All</option>\n              <option>Approved</option>\n              <option>Pending</option>\n              <option>Declined</option>\n            </select>\n          </div>\n          {filteredPosts.length !== 0 &&\n            filteredPosts.map((post, index) => (\n              <PostView\n                result={post}\n                key={index}\n                showStatus={true}\n                clickable={post.approved === 'approved'}\n              />\n            ))}\n        </div>\n        {user.userType === 'Admin' && (\n          <div className=\"pending-posts flex flex-col items-center m-2 rounded shadow hover:shadow-lg p-2 w-full md:w-6/12 max-h-96 md:max-h-full overflow-auto bg-indigo-100\">\n            <p className=\"text-2xl text-yellow-500 font-bold\">Pending posts</p>\n            {pendingPosts.length !== 0 &&\n              pendingPosts.map((post, index) => (\n                <PostView result={post} key={index} admin={true} />\n              ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/goku/projects/skill-share-react/src/components/Post/Post.js",["94","95"],"/home/goku/projects/skill-share-react/src/components/Editor/CustomEditor.js",["96"],"import { BLOCK_TYPE, DraftailEditor, INLINE_STYLE } from 'draftail';\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js';\nimport createInlineToolbarPlugin, {\n  Separator,\n} from 'draft-js-inline-toolbar-plugin';\nimport {\n  ItalicButton,\n  BoldButton,\n  UnderlineButton,\n  CodeButton,\n  HeadlineOneButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  UnorderedListButton,\n  OrderedListButton,\n  CodeBlockButton,\n} from 'draft-js-buttons';\n\nimport React, { useEffect, useState } from 'react';\n\nimport 'draft-js/dist/Draft.css';\nimport 'draftail/dist/draftail.css';\nimport 'draft-js-inline-toolbar-plugin/lib/plugin.css';\nimport './CustomEditor.css';\n\nconst inlineToolbarPlugin = createInlineToolbarPlugin();\nconst { InlineToolbar } = inlineToolbarPlugin;\n\nconst CustomEditor = ({\n  bindContent,\n  bindTitleContent,\n  bindTitle,\n  readOnly = false,\n  post = null,\n}) => {\n  const initialTitle = !post\n    ? JSON.parse(sessionStorage.getItem('draftail:title'))\n    : JSON.parse(post.titleContent);\n\n  const initialContent = !post\n    ? JSON.parse(sessionStorage.getItem('draftail:content'))\n    : JSON.parse(post.content);\n\n  const [editorState, setEditorState] = useState(() => {\n    if (initialTitle) {\n      // console.log('initial title', initialTitle);\n      return EditorState.createWithContent(convertFromRaw(initialTitle));\n    }\n    return EditorState.createEmpty();\n  });\n\n  const onSaveContent = (content) => {\n    if (content && bindContent) {\n      bindContent(content);\n    }\n\n    console.log('saving content', content);\n    sessionStorage.setItem('draftail:content', JSON.stringify(content));\n  };\n\n  const onSaveTitle = (newEditorState) => {\n    const content = convertToRaw(newEditorState.getCurrentContent());\n    if (bindTitleContent && bindTitle) {\n      bindTitle(newEditorState.getCurrentContent().getPlainText('\\u0001'));\n      bindTitleContent(content);\n    }\n    setEditorState(newEditorState);\n    console.log('saving title', content);\n    sessionStorage.setItem('draftail:title', JSON.stringify(content));\n  };\n\n  const bindPost = () => {\n    if (initialContent && bindContent) {\n      bindContent(initialContent);\n    }\n    if (initialTitle && bindTitleContent && bindTitle) {\n      bindTitleContent(initialTitle);\n      // extract title\n      bindTitle(convertFromRaw(initialTitle).getPlainText('\\u0001'));\n    }\n  };\n\n  useEffect(() => {\n    if (!readOnly) {\n      bindPost();\n    }\n  }, []);\n\n  return (\n    <div className=\"hover:bg-white shadow-lg border-transparent max-w-screen-md\">\n      <div className=\"post-title\">\n        <DraftailEditor\n          stripPastedStyles={true}\n          readOnly={readOnly}\n          editorState={editorState}\n          onChange={!readOnly ? onSaveTitle : null}\n          placeholder={!readOnly ? 'Your title...' : ''}\n          topToolbar={null}\n        />\n      </div>\n      <DraftailEditor\n        rawContentState={initialContent || null}\n        onSave={!readOnly ? onSaveContent : null}\n        readOnly={readOnly}\n        stripPastedStyles={true}\n        placeholder={!readOnly ? 'Type something...' : ''}\n        plugins={[inlineToolbarPlugin]}\n        topToolbar={null}\n        blockTypes={[\n          { type: BLOCK_TYPE.HEADER_THREE },\n          { type: BLOCK_TYPE.UNORDERED_LIST_ITEM },\n        ]}\n        inlineStyles={[\n          { type: INLINE_STYLE.BOLD },\n          { type: INLINE_STYLE.ITALIC },\n          { type: INLINE_STYLE.UNDERLINE },\n        ]}\n      />\n      <InlineToolbar>\n        {(externalProps) => (\n          <React.Fragment>\n            <BoldButton {...externalProps} />\n            <ItalicButton {...externalProps} />\n            <UnderlineButton {...externalProps} />\n            <CodeButton {...externalProps} />\n            <Separator {...externalProps} />\n\n            <HeadlineOneButton {...externalProps} />\n            <HeadlineTwoButton {...externalProps} />\n            <HeadlineThreeButton {...externalProps} />\n\n            <UnorderedListButton {...externalProps} />\n            <OrderedListButton {...externalProps} />\n\n            <CodeBlockButton {...externalProps} />\n          </React.Fragment>\n        )}\n      </InlineToolbar>\n    </div>\n  );\n};\n\nexport default CustomEditor;\n","/home/goku/projects/skill-share-react/src/components/WritePost/WritePost.js",[],"/home/goku/projects/skill-share-react/src/api/PostAPI.js",[],"/home/goku/projects/skill-share-react/src/components/PostView/PostView.js",[],"/home/goku/projects/skill-share-react/src/components/Post/PendingPost.js",["97","98"],"import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport PostAPI from '../../api/PostAPI';\nimport context from '../../context/context';\nimport { formatDate } from '../../functions';\nimport CustomEditor from '../Editor/CustomEditor';\n\nexport default function PendingPost() {\n  let { id } = useParams();\n  const { user, token } = useContext(context);\n  const [post, setPost] = useState(null);\n  const history = useHistory();\n  const fetchPost = async (id) => {\n    const { data, err } = await PostAPI.adminGetPostById(id, token);\n    console.log({ data, err });\n    if (err || data.success === false) {\n    } else {\n      console.log('setting post');\n      setPost(data);\n    }\n  };\n\n  const handleApproveButton = () => {\n    PostAPI.adminUpdatePost(\n      id,\n      {\n        approved: 'approved',\n      },\n      token\n    );\n    history.push('/dashboard');\n  };\n\n  const handleDeclineButton = () => {\n    PostAPI.adminUpdatePost(\n      id,\n      {\n        approved: 'declined',\n      },\n      token\n    );\n    history.push('/dashboard');\n  };\n\n  useEffect(() => {\n    fetchPost(id);\n  }, [id]);\n\n  return (\n    <div className=\"w-full\">\n      {post && (\n        <div className=\"mt-2 mx-auto max-w-screen-md\">\n          <div className=\"author-info flex flex-col items-start\">\n            <p>\n              By {post.author.firstName} {post.author.lastName}\n            </p>\n            <p>\n              <b>on {formatDate(post.createdAt)}</b>\n            </p>\n          </div>\n          <CustomEditor readOnly={true} post={post} />\n          <div className=\"w-full flex justify-end mt-2\">\n            <button\n              className=\"btn-indigo ml-2 bg-red-500 hover:bg-red-600\"\n              onClick={handleDeclineButton}\n            >\n              Decline\n            </button>\n            <button\n              className=\"btn-indigo ml-2 bg-green-500 hover:bg-green-600\"\n              onClick={handleApproveButton}\n            >\n              Approve\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/goku/projects/skill-share-react/src/components/Post/Comment.js",[],"/home/goku/projects/skill-share-react/src/context/context.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":21,"column":13,"nodeType":"105","messageId":"106","endLine":21,"endColumn":17},{"ruleId":"103","severity":1,"message":"107","line":16,"column":19,"nodeType":"105","messageId":"106","endLine":16,"endColumn":22},{"ruleId":"108","severity":1,"message":"109","line":23,"column":6,"nodeType":"110","endLine":23,"endColumn":8,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":1,"column":1,"nodeType":"114","endLine":14,"endColumn":3},{"ruleId":"112","severity":1,"message":"115","line":56,"column":1,"nodeType":"114","endLine":56,"endColumn":70},{"ruleId":"108","severity":1,"message":"116","line":46,"column":6,"nodeType":"110","endLine":46,"endColumn":8,"suggestions":"117"},{"ruleId":"103","severity":1,"message":"118","line":1,"column":40,"nodeType":"105","messageId":"106","endLine":1,"endColumn":46},{"ruleId":"108","severity":1,"message":"119","line":100,"column":6,"nodeType":"110","endLine":100,"endColumn":10,"suggestions":"120"},{"ruleId":"108","severity":1,"message":"121","line":87,"column":6,"nodeType":"110","endLine":87,"endColumn":8,"suggestions":"122"},{"ruleId":"103","severity":1,"message":"123","line":10,"column":11,"nodeType":"105","messageId":"106","endLine":10,"endColumn":15},{"ruleId":"108","severity":1,"message":"119","line":47,"column":6,"nodeType":"110","endLine":47,"endColumn":10,"suggestions":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'err' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchInput'. Either include it or remove the dependency array.","ArrayExpression",["127"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","React Hook useEffect has missing dependencies: 'token', 'updateUser', and 'user.userType'. Either include them or remove the dependency array.",["128"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has missing dependencies: 'bindPost' and 'readOnly'. Either include them or remove the dependency array.",["130"],"'user' is assigned a value but never used.",["131"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"136","fix":"140"},"Update the dependencies array to be: [searchInput]",{"range":"141","text":"142"},"Update the dependencies array to be: [token, updateUser, user.userType]",{"range":"143","text":"144"},"Update the dependencies array to be: [fetchPost, id]",{"range":"145","text":"146"},"Update the dependencies array to be: [bindPost, readOnly]",{"range":"147","text":"148"},{"range":"149","text":"146"},[575,577],"[searchInput]",[1323,1325],"[token, updateUser, user.userType]",[2551,2555],"[fetchPost, id]",[2432,2434],"[bindPost, readOnly]",[1160,1164]]